pwd
a <- 2
a * 2
library(rpart)
library(rstudioapi)
library(tree)
library(rJava)
library(partykit)
install.packages("partykit")
library(rpart)
library(rstudioapi)
library(tree)
library(rJava)
library(partykit)
setwd(dirname(getActiveDocumentContext()$path))
setwd(dirname(getActiveDocumentContext()$path))
library("preprocess/lecturaDatos.R")
source("preprocess/lecturaDatos.R")
library(rpart)
library(rstudioapi)
library(tree)
library(rJava)
library(partykit)
setwd(dirname(getActiveDocumentContext()$path))
source("preprocess/lecturaDatos.R")
source("preprocess/lecturaDatos.R")
# funcion para lectura de archivo. En este script tambien se
# consideran opciones de analisis exploratorio preliminar de
# los datos. Argumentos:
# @param path ruta hasta el archivo de datos a leer
# @param file archivo a leer
lecturaDatos <- function(path = "../../data/", files = c("train.csv", "test.csv")){
# inicializamos la variable de respuesta
dataset <- list()
for(file in files){
# se compone el path completo
pathCompleto <- paste(path,file,sep="")
# se leen los datos
dt <- read.csv(pathCompleto, header = T, sep = ",", na.strings = "?"
key <- unlist(strsplit(file, split='.', fixed=TRUE))[1]
dataset[[ key ]] <- dt
}
return(dataset)
}
# funcion para almacenar un conjunto de datos. Argumentos:
# @param path ruta donde se quiere almacenar
# @param file nombre del archivo donde almacenar los datos
# @param cdataset conjunto de datos a almacenar
escrituraDatos <- function(path, file, dataset){
# se compone el path completo
pathCompleto <- paste(path,file,sep="")
# se escribe el archivo
write.csv(dataset, pathCompleto, row.names = FALSE)
}
source("preprocess/lecturaDatos.R")
source('~/MÃ¡ster/DataMining/decisionTree/preprocess/lecturaDatos.R')
# funcion para lectura de archivo. En este script tambien se
# consideran opciones de analisis exploratorio preliminar de
# los datos. Argumentos:
# @param path ruta hasta el archivo de datos a leer
# @param file archivo a leer
lecturaDatos <- function(path = "../../data/", files = c("train.csv", "test.csv")){
# inicializamos la variable de respuesta
datasetValues <- c()
datasetNames <- c()
for(file in files){
# se compone el path completo
pathCompleto <- paste(path,file,sep="")
# se leen los datos
datasetValues <- c(datasetValues, read.csv(pathCompleto, header = T, sep = ",", na.strings = "?"))
datasetNames <- c(datasetNames, unlist(strsplit(file, split='.', fixed=TRUE))[1])
}
dataset <- setNames(as.list(datasetValues), datasetNames)
return(dataset)
}
source("preprocess/lecturaDatos.R")
dataset <- lecturaDatos()
# funcion para lectura de archivo. En este script tambien se
# consideran opciones de analisis exploratorio preliminar de
# los datos. Argumentos:
# @param path ruta hasta el archivo de datos a leer
# @param file archivo a leer
lecturaDatos <- function(path = "../data/", files = c("train.csv", "test.csv")){
# inicializamos la variable de respuesta
datasetValues <- c()
datasetNames <- c()
for(file in files){
# se compone el path completo
pathCompleto <- paste(path,file,sep="")
# se leen los datos
datasetValues <- c(datasetValues, read.csv(pathCompleto, header = T, sep = ",", na.strings = "?"))
datasetNames <- c(datasetNames, unlist(strsplit(file, split='.', fixed=TRUE))[1])
}
dataset <- setNames(as.list(datasetValues), datasetNames)
return(dataset)
}
source("preprocess/lecturaDatos.R")
dataset <- lecturaDatos()
dataset
names(dataset)
# funcion para lectura de archivo. En este script tambien se
# consideran opciones de analisis exploratorio preliminar de
# los datos. Argumentos:
# @param path ruta hasta el archivo de datos a leer
# @param file archivo a leer
lecturaDatos <- function(path = "../data/", files = c("train.csv", "test.csv")){
# inicializamos la variable de respuesta
datasetValues <- c()
datasetNames <- c()
for(file in files){
# se compone el path completo
pathCompleto <- paste(path,file,sep="")
# se leen los datos
datasetValues <- c(datasetValues, read.csv(pathCompleto, header = T, sep = ",", na.strings = "?"))
datasetNames <- c(datasetNames, unlist(strsplit(file, split='.', fixed=TRUE))[1])
}
dataset <- setNames(as.list(datasetNames), datasetValues)
return(dataset)
}
dataset <- lecturaDatos()
names(dataset)
# funcion para lectura de archivo. En este script tambien se
# consideran opciones de analisis exploratorio preliminar de
# los datos. Argumentos:
# @param path ruta hasta el archivo de datos a leer
# @param file archivo a leer
lecturaDatos <- function(path = "../data/", files = c("train.csv", "test.csv")){
# inicializamos la variable de respuesta
datasets <- list()
datasetValues <- c()
datasetNames <- c()
for(file in files){
# se compone el path completo
pathCompleto <- paste(path,file,sep="")
# se leen los datos
datasetValue <- read.csv(pathCompleto, header = T, sep = ",", na.strings = "?")
datasetName <- unlist(strsplit(file, split='.', fixed=TRUE))[1]
datasets[datasetName] <- datasetValue
}
return(datasets)
}
dataset <- lecturaDatos()
names(dataset)
dataset$train
# funcion para lectura de archivo. En este script tambien se
# consideran opciones de analisis exploratorio preliminar de
# los datos. Argumentos:
# @param path ruta hasta el archivo de datos a leer
# @param file archivo a leer
lecturaDatos <- function(path = "../data/", files = c("train.csv", "test.csv")){
# inicializamos la variable de respuesta
datasets <- list()
datasetValues <- c()
datasetNames <- c()
for(file in files){
# se compone el path completo
pathCompleto <- paste(path,file,sep="")
# se leen los datos
datasetValue <- read.csv(pathCompleto, header = T, sep = ",", na.strings = "?")
datasetName <- unlist(strsplit(file, split='.', fixed=TRUE))[1]
datasets[[datasetName]] <- datasetValue
}
return(datasets)
}
dataset <- lecturaDatos()
names(dataset)
dataset$train
#Lectura del dataset de train y testing
dataset <- readData(files = c("train.csv", "test.csv"))
# Librerias propias
source("preprocess/lecturaDatos.R")
#Lectura del dataset de train y testing
dataset <- readData(files = c("train.csv", "test.csv"))
require(discretization)
install.packages("disc.Topdown")
install.packages("discretization")
# Librerias propias
source("preprocess/lecturaDatos.R")
source("preprocess/discretization.R")
source("preprocess/discretizacion.R")
#Lectura del dataset de train y testing
dataset <- readData(files = c("train.csv", "test.csv"))
#Discretizamos las variables continuas
str(dataset$test)
#Lectura del dataset de train y testing
dataset <- readData(files = c("train.csv", "test.csv"))
#Discretizamos las variables continuas
str(dataset$train)
pruebas <- myDiscretization(dataset$train, print = TRUE)
se
#Lectura del dataset de train y testing
dataset <- readData(files = c("train.csv", "test.csv"))
source("preprocess/discretizacion.R")
#Lectura del dataset de train y testing
dataset <- readData(files = c("train.csv", "test.csv"))
# Librerias R
library(rpart)
library(rstudioapi)
library(tree)
library(rJava)
library(partykit)
# Definimos el path de donde estemos trabajando.
setwd(dirname(getActiveDocumentContext()$path))
# Librerias propias
source("preprocess/lecturaDatos.R")
source("preprocess/discretizacion.R")
#Lectura del dataset de train y testing
dataset <- readData(files = c("train.csv", "test.csv"))
dataset$test
library(dplyr)
#Tratamiento NA
dataset$train %>%
select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
source("preprocess/NAs")
install.packages("mice")
install.packages("robCompositions")
library(mice)
require(robCompositions)
install.packages("mice")
library(mice)
install.packages("mice", repos = "http://cran.us.r-project.org")
# Librerias propias
source("preprocess/lecturaDatos.R")
source("preprocess/discretizacion.R")
source("preprocess/NAs.R")
source("preprocess/NAs.R")
#Tratamiento NA
dataset$train %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))
dataset$train <- delete_NA(dataset$train)
#Tratamiento NA
dataset$train %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))
pruebas <- myDiscretization(dataset$train, print = TRUE)
dataset$train
# Definimos el path de donde estemos trabajando.
setwd(dirname(getActiveDocumentContext()$path))
# Librerias propias
source("preprocess/lecturaDatos.R")
source("preprocess/discretizacion.R")
source("preprocess/NAs.R")
#Lectura del dataset de train y testing
dataset <- readData(files = c("train.csv", "test.csv"))
#Tratamiento NA
dataset$train %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))
i
dim(dataset$train)
dataset$train <- delete_NA(dataset$train)
dim(dataset$train)
str(dataset$train)
d
#Discretizamos las variables continuas
str(dataset$train)
discretization::disc.Topdown(dataset$train, method=1)
#Lectura del dataset de train y testing
dataset <- readData(files = c("train.csv", "test.csv"))
#Tratamiento NA
dataset$train %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))
dataset$train[complete.cases(dataset$train),]
dataset$train[complete.cases(dataset$train),]
dataset$train[rowSums(is.na(dataset$train)) == 0, ]
#Tratamiento NA
dataset$train %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))
discretization::disc.Topdown(dataset$train[,1], method=1)
discretization::disc.Topdown(dataset$train[c(1:3),], method=1)
#Discretizamos las variables continuas
str(dataset$train)
r
#Tratamiento NA
#Numero de Missing values
dataset$train %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))
#Tatamiento de los missign Values
dataset$train <- delete_NA(dataset$train)
#Discretizamos las variables continuas
str(dataset$train)
discretization::disc.Topdown(dataset$train[c(1:3),], method=1)
#Lectura del dataset de train y testing
dataset <- readData(files = c("train.csv", "test.csv"))
#Tratamiento NA
#Numero de Missing values
dataset$train %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))
#Tatamiento de los missign Values
dataset$train <- delete_NA(dataset$train)
#Discretizamos las variables continuas
dataset$train <- myDiscretization(dataset$train)
require(arules)
install.packages("arules")
require(discretization)
require(arules)
source("preprocess/NAs.R")
#Lectura del dataset de train y testing
dataset <- readData(files = c("train.csv", "test.csv"))
#Tratamiento NA
#Numero de Missing values
dataset$train %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))
#Tatamiento de los missign Values
dataset$train <- delete_NA(dataset$train)
# FunciÃ³n para discretizar las variables
# methods: 1 CAIM, 2 CACC, 3 AMEVA
myDiscretization <- function (dataset, method = 1, print = FALSE) {
dd <- discretize(dataset, method = "cluster")
#dd <- discretization::disc.Topdown(dataset, method=method)
# print(dd$cutp)
return(dd)
}
#Discretizamos las variables continuas
dataset$train <- myDiscretization(dataset$train)
discretize(x = dataset$train, method = "cluster")
discretize(x = dataset$train, method = "cluster", breaks = 3)
discretize(x = dataset$train[,1], method = "cluster")
source("preprocess/NAs.R")
#Lectura del dataset de train y testing
dataset <- readData(files = c("train.csv", "test.csv"))
#Tratamiento NA
#Numero de Missing values
dataset$train %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))
#Tatamiento de los missign Values
dataset$train <- delete_NA(dataset$train)
#Discretizamos las variables continuas
dataset$train <- myDiscretization(dataset$train, method = 2)
# FunciÃ³n para discretizar las variables
# methods: 1 CAIM, 2 CACC, 3 AMEVA
myDiscretization <- function (dataset, method = 1) {
#discretize(dataset, method = "cluster")
dd <- discretization::disc.Topdown(dataset, method=method)
# print(dd$cutp)
return(dd$Disc.data)
}
#Discretizamos las variables continuas
dataset$train <- myDiscretization(dataset$train, method = 2)
dataset$train
#Discretizamos las variables continuas
dataset$train <- myDiscretization(dataset$train, method = 2)
# FunciÃ³n para discretizar las variables
# methods: 1 CAIM, 2 CACC, 3 AMEVA
myDiscretization <- function (dataset, method = 1) {
#discretize(dataset, method = "cluster")
# Tarda demasiado
dd <- disc.Topdown(dataset, method=method)
# print(dd$cutp)
return(dd$Disc.data)
}
#Discretizamos las variables continuas
dataset$train <- myDiscretization(dataset$train, method = 2)
# FunciÃ³n para discretizar las variables
# methods: 1 CAIM, 2 CACC, 3 AMEVA
myDiscretization <- function (dataset, method = 1) {
#discretize(dataset, method = "cluster")
dd <- disc.Topdown(dataset, method=method)  # Tarda demasiado
# print(dd$cutp)
return(dd$Disc.data)
}
#Discretizamos las variables continuas
dataset$train <- myDiscretization(dataset$train[ ,c(1:5)], method = 2)
arules::discretize(dataset$train, method = "interval", categories = 4, onlycuts = T)
arules::discretize(dataset$train, method = "interval", breaks = 4, onlycuts = T)
arules::discretize(dataset$train[,1], method = "interval", breaks = 4, onlycuts = T)
arules::discretize(dataset$train[,2], method = "interval", breaks = 4, onlycuts = T)
str()
str(dataset$train)
# FunciÃ³n para discretizar las variables
# methods: 1 CAIM, 2 CACC, 3 AMEVA
myDiscretization <- function (dataset, method = 1) {
sapply( df, function(x) if("num" %in% class(x) ) {
mastercuts <- arules::discretize(x, method = "interval", categories = 4, onlycuts = T)
dataset[[x]] <- as.numeric(cut(dataset[[x]], breaks = mastercuts))
} else { x } )
#dd <- disc.Topdown(dataset, method=method)  # Tarda demasiado
#print(cm$cutp)
# print(dd$cutp)
return(dataset)
}
myDiscretization(dataset$train, method = 2)
# FunciÃ³n para discretizar las variables
# methods: 1 CAIM, 2 CACC, 3 AMEVA
myDiscretization <- function (dataset, method = 1) {
sapply( df, function(x) {
mastercuts <- arules::discretize(x, method = "interval", categories = 4, onlycuts = T)
dataset[[x]] <- as.numeric(cut(dataset[[x]], breaks = mastercuts))
})
#dd <- disc.Topdown(dataset, method=method)  # Tarda demasiado
#print(cm$cutp)
# print(dd$cutp)
return(dataset)
}
myDiscretization(dataset$train, method = 2)
require(discretization)
require(arules)
# FunciÃ³n para discretizar las variables
# methods: 1 CAIM, 2 CACC, 3 AMEVA
myDiscretization <- function (dataset, method = 1) {
sapply( df, function(x) {
mastercuts <- arules::discretize(x, method = "interval", categories = 4, onlycuts = T)
dataset[[x]] <- as.numeric(cut(dataset[[x]], breaks = mastercuts))
})
#dd <- disc.Topdown(dataset, method=method)  # Tarda demasiado
#print(cm$cutp)
# print(dd$cutp)
return(dataset)
}
myDiscretization(dataset$train, method = 2)
summary(dataset$train)
install.packages("NoiseFiltersR")
source("preprocess/noise.R")
## TambiÃ©n se puedo devolver el conjunto sin ruido.
library(NoiseFiltersR)
install.packages("NoiseFiltersR")
install.packages("NoiseFiltersR",repos="http://cran.us.r-project.org")
install.packages("randomForest",repos="http://cran.us.r-project.org")
## TambiÃ©n se puedo devolver el conjunto sin ruido.
library(NoiseFiltersR)
install.packages("NoiseFiltersR")
## TambiÃ©n se puedo devolver el conjunto sin ruido.
library(NoiseFiltersR)
## EF (ensemble filter):
#Llama a varios clasificadores y cuando la mayorÃ­a de ellos lo clasifica mal --> se considera ruido
ruidoEnsembleFilter<-function(x){
ensembleFilter<-EF(x)
return(ensembleFilter$remIdx)
}
source("preprocess/noise.R")
#Lectura de datos
dataset <- readData(files = c("train.csv", "test.csv"))
# Numero de Missing values
dataset$train %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))
# Tatamiento de los missign Values
dataset$train <- delete_NA(dataset$train)
# TDetecciÃ³n outliers
dataset$train <- delete_ruidoCVCF(dataset$train)
